--- modules/datetime/tests/src/Kernel/Views/FilterDateTest.php
+++ modules/datetime/tests/src/Kernel/Views/FilterDateTest.php
@@ -2,7 +2,6 @@
 
 namespace Drupal\Tests\datetime\Kernel\Views;
 
-use Drupal\Component\Datetime\DateTimePlus;
 use Drupal\datetime\Plugin\Field\FieldType\DateTimeItem;
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\node\Entity\Node;
@@ -182,44 +181,6 @@ public function testDateIs() {
     }
   }
 
-  /**
-   * Returns UTC timestamp of user's TZ 'now'.
-   *
-   * The date field stores date_only values without conversion, considering them
-   * already as UTC. This method returns the UTC equivalent of user's 'now' as a
-   * unix timestamp, so they match using Y-m-d format.
-   *
-   * @return int
-   *   Unix timestamp.
-   */
-  protected function getUTCEquivalentOfUserNowAsTimestamp() {
-    $user_now = new DateTimePlus('now', new \DateTimeZone(drupal_get_user_timezone()));
-    $utc_equivalent = new DateTimePlus($user_now->format('Y-m-d H:i:s'), new \DateTimeZone(DATETIME_STORAGE_TIMEZONE));
-
-    return $utc_equivalent->getTimestamp();
-  }
-
-  /**
-   * Returns an array formatted date_only values.
-   *
-   * @param int $timestamp
-   *   Unix Timestamp equivalent to user's "now".
-   *
-   * @return array
-   *   An array of DATETIME_DATE_STORAGE_FORMAT date values. In order tomorrow,
-   *   today and yesterday.
-   */
-  protected function getRelativeDateValuesFromTimestamp($timestamp) {
-    return [
-      // Tomorrow.
-      \Drupal::service('date.formatter')->format($timestamp + 86400, 'custom', DATETIME_DATE_STORAGE_FORMAT, DATETIME_STORAGE_TIMEZONE),
-      // Today.
-      \Drupal::service('date.formatter')->format($timestamp, 'custom', DATETIME_DATE_STORAGE_FORMAT, DATETIME_STORAGE_TIMEZONE),
-      // Yesterday.
-      \Drupal::service('date.formatter')->format($timestamp - 86400, 'custom', DATETIME_DATE_STORAGE_FORMAT, DATETIME_STORAGE_TIMEZONE),
-    ];
-  }
-
   /**
    * Updates tests nodes date fields values.
    *
