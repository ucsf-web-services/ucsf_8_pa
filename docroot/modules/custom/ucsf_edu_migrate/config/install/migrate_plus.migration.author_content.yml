# A "migration" is, in technical terms, a plugin whose configuration describes
# how to read source data, process it (generally by mapping source fields to
# destination fields), and write it to Drupal.

# The machine name for a migration, used to uniquely identify it.
id: author_content

# A human-friendly description of the migration.
label: Migrate the author content type into the new ucsf.edu website

# The machine name of the group containing this migration (which contains shared
# configuration to be merged with our own configuration here).
migration_group: content_import

source:
  plugin: url
  data_fetcher_plugin: http
  data_parser_plugin: xml
  urls: http://local.ucsf.edu/authorxml
  item_selector: /nodes/node
  
# unique identifier needs to be an integer 
  ids:
    nid:
      type: integer
  
  fields:
    -
      name: nid
      label: 'node id'
      selector: Nid
    -
      name: author_title
      label: 'author node title'
      selector: title
    -
      name: author_bio
      label: 'author node bio'
      selector: Body
    -
      name: beats_tax_id
      label: 'Beats taxonomy reference'
      selector: Beats
    -
      name: author_type_tax_id
      label: 'Author type taxonomy reference'
      selector: Author-Type
    -
      name: author_first_name
      label: 'author first name'
      selector: First-Name
    -
      name: author_last_name
      label: 'author last name'
      selector: Last-Name
    -
      name: author_job_title
      label: 'author job title'
      selector: Job-Title
    -
      name: author_phone
      label: 'author phone number'
      selector: Phone
    -
      name: author_email
      label: 'author email'
      selector: Email
    -
      name: author_twitter_handle
      label: 'author twitter handle'
      selector: Twitter-Handle
    -
      name: author_image
      label: 'source url of the author profile image'
      selector: Image
    
  constants:
    file_directory: public://


# Every migration must also have a destination plugin, which handles writing
# the migrated data in the appropriate form for that particular kind of data.
# Most Drupal content is an "entity" of one type or another, and we need to
# specify what entity type we are populating (in this case, taxonomy terms).
# Unlike the source plugin (which is specific to our particular scenario), this
# destination plugin is implemented in Drupal itself.
destination:
  plugin: entity:node
  
  default_bundle: author

# Here's the meat of the migration - the processing pipeline. This describes how
# each destination field is to be populated based on the source data. For each
# destination field, one or more process plugins may be invoked.
process:
  type:
    plugin: default_value
    default_value: author
  
  title: author_title
  
  body: author_bio
  
  field_first_name: author_first_name
  
  field_last_name: author_last_name
  
  field_job_title: author_job_title
  
  field_author_type:
    -
      plugin: skip_on_empty
      method: process
      source: author_type_tax_id
      message: 'there was an empty field'
      
  field_topics: 
    -
      plugin: skip_on_empty
      method: process
      source: beats_tax_id
      message: 'there was an empty field' 
    -
      plugin: explode
      source: beats_tax_id
      delimiter: ,
    
      
      
  field_phone: author_phone
  
  field_twitter_handle: author_twitter_handle
  
  field_email: author_email
  
  destination_basename:
    plugin: callback
    callable: basename
    source: author_image
  destination_path:
    plugin: concat
    source:
      - 'constants/file_directory'
      - '@destination_basename'
  
  field_author_image:
    -
      plugin: skip_on_empty
      method: process
      source: author_image
      message: 'there was an empty field'
    -
      plugin: file_copy
      source:
        - author_image
        - '@destination_path'
    -
      plugin: entity_generate
      
  # The simplest process plugin is named 'get' - it is the default plugin, so
  # does not need to be explicitly named. It simply copies the source value
  # (the 'style' field from the source database in this case) to the destination
  # field (the taxonomy term 'name' field). You can see we simply copy the
  # source 'details' field to destination 'description' field in the same way.


# Every migration must have a source plugin, which controls the delivery of our
# source data. In this case, our source plugin has the name "beer_term", which
# Drupal resolves to the PHP class defined in
# src/Plugin/migrate/source/BeerTerm.php.

# We'll learn more about dependencies in beer_node - here, we leave them empty.
migration_dependencies: {}

# By default, configuration entities (like this migration) are not automatically
# removed when the migration which installed them is uninstalled. To have your
# migrations uninstalled with your migration module, add an enforced dependency
# on your module.
dependencies:
  enforced:
    module:
      - ucsf_edu_migrate
