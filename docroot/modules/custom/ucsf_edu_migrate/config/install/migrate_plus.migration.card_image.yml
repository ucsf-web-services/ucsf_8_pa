# A "migration" is, in technical terms, a plugin whose configuration describes
# how to read source data, process it (generally by mapping source fields to
# destination fields), and write it to Drupal.

# The machine name for a migration, used to uniquely identify it.
id: card_image

# A human-friendly description of the migration.
label: Migrate the card image for featured image type into the new ucsf.edu website

# The machine name of the group containing this migration (which contains shared
# configuration to be merged with our own configuration here).
migration_group: content_import

source:
  plugin: url
  data_fetcher_plugin: http
  data_parser_plugin: xml
  urls: public://card_image.xml
  item_selector: /nodes/node

# unique identifier needs to be an integer
  ids:
    fid:
      type: integer

  fields:
    -
      name: fid
      label: 'Image file id'
      selector: ft_image_fid
    -
      name: path
      label: 'Path to the url of the item'
      selector: featured_image
    -
      name: alt
      label: 'The alt text of the image'
      selector: image_alt
    -
      name: title
      label: 'The title of the image'
      selector: image_title

  constants:
    file_directory: public://


# Every migration must also have a destination plugin, which handles writing
# the migrated data in the appropriate form for that particular kind of data.
# Most Drupal content is an "entity" of one type or another, and we need to
# specify what entity type we are populating (in this case, taxonomy terms).
# Unlike the source plugin (which is specific to our particular scenario), this
# destination plugin is implemented in Drupal itself.
destination:
  plugin: entity:media

  default_bundle: image

# Here's the meat of the migration - the processing pipeline. This describes how
# each destination field is to be populated based on the source data. For each
# destination field, one or more process plugins may be invoked.
process:

  destination_basename:
    plugin: callback
    callable: basename
    source: path

  destination_path:
    plugin: concat
    source:
      - 'constants/file_directory'
      - '@destination_basename'

#  field_media_image:
#    -
#      plugin: skip_on_empty
#      method: process
#      source: path
#      message: 'there was an empty field'
#    -
#      plugin: file_copy
#      source:
#        - path
#        - '@destination_path'
#    -
#      plugin: entity_generate

  name: title
#  field_media_tags: path

  field_media_image/alt: alt
  mid: fid
  vid: fid
#  target_id: nid

  # The simplest process plugin is named 'get' - it is the default plugin, so
  # does not need to be explicitly named. It simply copies the source value
  # (the 'style' field from the source database in this case) to the destination
  # field (the taxonomy term 'name' field). You can see we simply copy the
  # source 'details' field to destination 'description' field in the same way.


# Every migration must have a source plugin, which controls the delivery of our
# source data. In this case, our source plugin has the name "beer_term", which
# Drupal resolves to the PHP class defined in
# src/Plugin/migrate/source/BeerTerm.php.

# We'll learn more about dependencies in beer_node - here, we leave them empty.
migration_dependencies: {}

# By default, configuration entities (like this migration) are not automatically
# removed when the migration which installed them is uninstalled. To have your
# migrations uninstalled with your migration module, add an enforced dependency
# on your module.
dependencies:
  enforced:
    module:
      - ucsf_edu_migrate
