# A "migration" is, in technical terms, a plugin whose configuration describes
# how to read source data, process it (generally by mapping source fields to
# destination fields), and write it to Drupal.

# The machine name for a migration, used to uniquely identify it.
id: media_coverage_content

# A human-friendly description of the migration.
label: Migrate the media coverage content type into the new ucsf.edu website

# The machine name of the group containing this migration (which contains shared
# configuration to be merged with our own configuration here).
migration_group: content_import

source:
  plugin: url
  data_fetcher_plugin: http
  data_parser_plugin: xml
  urls: public://media_coverage_xml_feed.xml
  item_selector: /nodes/node

# unique identifier needs to be an integer
  ids:
    nid:
      type: integer

  fields:
    -
      name: nid
      label: 'node id'
      selector: Nid
    -
      name: title
      label: 'author node title'
      selector: title
    -
      name: ex-url
      label: 'url to referenced article'
      selector: external-url
    -
      name: media_source
      label: 'the source of the media'
      selector: media_source
    -
      name: areas_tax
      label: 'Areas type taxonomy reference'
      selector: Areas
    -
      name: topics_tax
      label: 'media coverage topic taxonomy reference'
      selector: Topics
    -
      name: orgs_tax
      label: 'media coverage organizations taxonomy reference'
      selector: Organizations
    -
      name: people_tax
      label: 'media coverage people taxonomy reference'
      selector: People
    -
      name: loc_tax
      label: 'media coverage locations taxonomy reference'
      selector: Locations
    -
      name: pub_date
      label: 'the published date of the news'
      selector: Post-date
    -
      name: uid
      label: 'Id of the account that authored the content'
      selector: Author-uid
    -
      name: updated-date
      label: 'date the content was updated'
      selector: updated-date

  constants:
    file_directory: public://


# Every migration must also have a destination plugin, which handles writing
# the migrated data in the appropriate form for that particular kind of data.
# Most Drupal content is an "entity" of one type or another, and we need to
# specify what entity type we are populating (in this case, taxonomy terms).
# Unlike the source plugin (which is specific to our particular scenario), this
# destination plugin is implemented in Drupal itself.
destination:
  plugin: entity:node

  default_bundle: article

# Here's the meat of the migration - the processing pipeline. This describes how
# each destination field is to be populated based on the source data. For each
# destination field, one or more process plugins may be invoked.
process:
  type:
    plugin: default_value
    default_value: article

  title: title

  nid: nid

  uid: uid

  field_date: pub_date

  field_date_and_time: pub_date

  created:
    plugin: format_date
    from_format: 'Y-m-d\TH:i:s'
    to_format: 'U'
    source: pub_date

  changed: updated-date

  field_external_url: ex-url

  field_areas:
    -
      plugin: skip_on_empty
      method: process
      source: areas_tax
      message: 'there was an empty field'
    -
      plugin: explode
      source: areas_tax
      delimiter: ','

  field_topics:
    -
      plugin: skip_on_empty
      method: process
      source: topics_tax
      message: 'there was an empty field'
    -
      plugin: explode
      source: topics_tax
      delimiter: ','

  field_organizations:
    -
      plugin: skip_on_empty
      method: process
      source: orgs_tax
      message: 'there was an empty field'
    -
      plugin: explode
      source: orgs_tax
      delimiter: ','

  field_people:
    -
      plugin: skip_on_empty
      method: process
      source: people_tax
      message: 'there was an empty field'
    -
      plugin: explode
      source: people_tax
      delimiter: ','

  field_locations:
    -
      plugin: skip_on_empty
      method: process
      source: loc_tax
      message: 'there was an empty field'
    -
      plugin: explode
      source: loc_tax
      delimiter: ','

  field_article_type:
    -
      plugin: default_value
      default_value: 413496

  field_source:
    -
      plugin: migration_lookup
      migration: press_tax
      source: media_source



# field_author_byline:
#   -
#     plugin: testingbase
#     para_type: source
#     fields:
#       -
#         field_source:
#           -
#             plugin: entity_generate
#             source: media_source
#             entity_type: taxonomy_term

  # The simplest process plugin is named 'get' - it is the default plugin, so
  # does not need to be explicitly named. It simply copies the source value
  # (the 'style' field from the source database in this case) to the destination
  # field (the taxonomy term 'name' field). You can see we simply copy the
  # source 'details' field to destination 'description' field in the same way.


# Every migration must have a source plugin, which controls the delivery of our
# source data. In this case, our source plugin has the name "beer_term", which
# Drupal resolves to the PHP class defined in
# src/Plugin/migrate/source/BeerTerm.php.

# We'll learn more about dependencies in beer_node - here, we leave them empty.
migration_dependencies: {}

# By default, configuration entities (like this migration) are not automatically
# removed when the migration which installed them is uninstalled. To have your
# migrations uninstalled with your migration module, add an enforced dependency
# on your module.
dependencies:
  enforced:
    module:
      - ucsf_edu_migrate
