# A "migration" is, in technical terms, a plugin whose configuration describes
# how to read source data, process it (generally by mapping source fields to
# destination fields), and write it to Drupal.

# The machine name for a migration, used to uniquely identify it.
id: news_content

# A human-friendly description of the migration.
label: Migrate the author content type into the new ucsf.edu website

# The machine name of the group containing this migration (which contains shared
# configuration to be merged with our own configuration here).
migration_group: content_import

source:
  plugin: url
  data_fetcher_plugin: http
  data_parser_plugin: xml
  urls: http://local.ucsf.edu/newsxml
  item_selector: /nodes/node
  
# unique identifier needs to be an integer 
  ids:
    nid:
      type: integer
  
  fields:
    -
      name: nid
      label: 'node id'
      selector: Nid
    -
      name: news_title
      label: 'news node title'
      selector: title
    -
      name: author
      label: 'news article author'
      selector: Author
    -
      name: subtitle
      label: 'news subtitle'
      selector: Subtitle
    -
      name: body
      label: 'news body'
      selector: body
    -
      name: areas_tax
      label: 'news primary area tax'
      selector: Areas
    -
      name: article_type_tax
      label: 'news article type tax'
      selector: Article-Type
    -
      name: topics_tax
      label: 'news topics tax'
      selector: Topics
    -
      name: orgs_tax
      label: 'news organizations tax'
      selector: Organizations
    -
      name: people_tax
      label: 'news people tax'
      selector: People
    -
      name: loc_tax
      label: 'news location tax'
      selector: location
    -
      name: news_apple
      label: 'news apple news title'
      selector: Apple_News_Title
    -
      name: inline_files
      label: 'news inline files'
      selector: Inline-Files
    -
      name: pid
      label: 'paragraph id'
      selector: pid
      
    
  constants:
    file_directory: public://


# Every migration must also have a destination plugin, which handles writing
# the migrated data in the appropriate form for that particular kind of data.
# Most Drupal content is an "entity" of one type or another, and we need to
# specify what entity type we are populating (in this case, taxonomy terms).
# Unlike the source plugin (which is specific to our particular scenario), this
# destination plugin is implemented in Drupal itself.
destination:
  plugin: entity:node
  
  default_bundle: article

# Here's the meat of the migration - the processing pipeline. This describes how
# each destination field is to be populated based on the source data. For each
# destination field, one or more process plugins may be invoked.
process:
  type:
    plugin: default_value
    default_value: article
  
  title: news_title
  
  body: body
  
  field_areas:
    -
      plugin: skip_on_empty
      method: process
      source: areas_tax
      message: 'there was an empty field'
    -
      plugin: explode
      source: areas_tax
      delimiter: ,
      
  field_article_type:
    -
      plugin: skip_on_empty
      method: process
      source: article_type_tax
      message: 'there was an empty field'
      
  field_sub_title: subtitle  
  
  field_locations:
    -
      plugin: skip_on_empty
      method: process
      source: loc_tax
      message: 'there was an empty field' 
  
  field_organizations:
    -
      plugin: skip_on_empty
      method: process
      source: orgs_tax
      message: 'there was an empty field'
    -
      plugin: explode
      source: orgs_tax
      delimiter: ,     
  
  field_people:
    -
      plugin: skip_on_empty
      method: process
      source: people_tax
      message: 'there was an empty field' 
    -
      plugin: explode
      source: people_tax
      delimiter: , 
  
  field_topics:
    -
      plugin: skip_on_empty
      method: process
      source: topics_tax
      message: 'there was an empty field' 
    -
      plugin: explode
      source: topics_tax
      delimiter: , 
  
  field_author_type:
    -
      plugin: skip_on_empty
      method: process
      source: author_type_tax_id
      message: 'there was an empty field'
  
  field_author_byline: 
    -
      plugin: testingbase
      source: pid
      para_type: author
      field: pid
      destination: 
        -
          field_a_author: author
          field_test_num: article_type_tax 
      otherfield:
        -
          somefiled: loc_tax
          someotherfield: topics_tax
              
      'dest/field1': topics_tax
      'dest/field2': author_type_tax_id  
#    plugin: mds_paragraph
#    source: pid
#    type: author
#    plugin: sub_process
#    source: pid
#    process:
#      target_id:
#        plugin: migration_lookup
#        migration: author_paragraph
#        source: pid
#    - 
#      target_id: 1714
#    -
#      target_revision_id: 2489  
    
#  field_author_byline/field_author_byline_target_id:
#    -
#      plugin: default_value
#      default_value: 1714
# 
#  field_author_byline/field_author_byline_target_id:
#    -
#      plugin: default_value
#      default_value: 2489
        
  # The simplest process plugin is named 'get' - it is the default plugin, so
  # does not need to be explicitly named. It simply copies the source value
  # (the 'style' field from the source database in this case) to the destination
  # field (the taxonomy term 'name' field). You can see we simply copy the
  # source 'details' field to destination 'description' field in the same way.


# Every migration must have a source plugin, which controls the delivery of our
# source data. In this case, our source plugin has the name "beer_term", which
# Drupal resolves to the PHP class defined in
# src/Plugin/migrate/source/BeerTerm.php.

# We'll learn more about dependencies in beer_node - here, we leave them empty.
migration_dependencies: {}

# By default, configuration entities (like this migration) are not automatically
# removed when the migration which installed them is uninstalled. To have your
# migrations uninstalled with your migration module, add an enforced dependency
# on your module.
dependencies:
  enforced:
    module:
      - ucsf_edu_migrate
