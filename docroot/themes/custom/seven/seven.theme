<?php

/**
 * @file
 * Functions to support theming in the Seven theme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\image\Plugin\Filter;
use Drupal\Core\Url;
//use Drupal\Component\Serialization\Json;

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 */
function seven_preprocess_html(&$variables) {
  // If on a node add or edit page, add a node-layout class.
  $path_args = explode('/', \Drupal::request()->getPathInfo());
  if ($suggestions = theme_get_suggestions($path_args, 'page', '-')) {
    foreach ($suggestions as $suggestion) {
      if ($suggestion === 'page-node-edit' || strpos($suggestion, 'page-node-add') !== FALSE) {
        $variables['attributes']['class'][] = 'node-form-layout';
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu-local-tasks templates.
 *
 * Use preprocess hook to set #attached to child elements
 * because they will be processed by Twig and drupal_render will
 * be invoked.
 */
function seven_preprocess_menu_local_tasks(&$variables) {
  if (!empty($variables['primary'])) {
    $variables['primary']['#attached'] = [
      'library' => [
        'seven/drupal.nav-tabs',
      ],
    ];
  }
  elseif (!empty($variables['secondary'])) {
    $variables['secondary']['#attached'] = [
      'library' => [
        'seven/drupal.nav-tabs',
      ],
    ];
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu-local-task templates.
 */
function seven_preprocess_menu_local_task(&$variables) {
  $variables['attributes']['class'][] = 'tabs__tab';
}

/**
 * Implements hook_preprocess_HOOK() for list of available node type templates.
 */
function seven_preprocess_node_add_list(&$variables) {
  if (!empty($variables['content'])) {
    /** @var \Drupal\node\NodeTypeInterface $type */
    foreach ($variables['content'] as $type) {
      $variables['types'][$type->id()]['label'] = $type->label();
      $variables['types'][$type->id()]['url'] = Url::fromRoute('node.add', ['node_type' => $type->id()]);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for block content add list templates.
 *
 * Displays the list of available custom block types for creation, adding
 * separate variables for the label and url.
 */
function seven_preprocess_block_content_add_list(&$variables) {
  if (!empty($variables['content'])) {
    foreach ($variables['content'] as $type) {
      $variables['types'][$type->id()]['label'] = $type->label();
      $options = ['query' => \Drupal::request()->query->all()];
      $variables['types'][$type->id()]['url'] = Url::fromRoute('block_content.add_form', ['block_content_type' => $type->id()], $options);
    }
  }
}

/**
 * Implements hook_preprocess_block() for block content.
 *
 * Disables contextual links for all blocks.
 */
function seven_preprocess_block(&$variables) {
  if (isset($variables['title_suffix']['contextual_links'])) {
    unset($variables['title_suffix']['contextual_links']);
    unset($variables['elements']['#contextual_links']);

    $variables['attributes']['class'] = array_diff($variables['attributes']['class'], ['contextual-region']);
  }
}

/**
 * Implements hook_preprocess_HOOK() for block admin page templates.
 */
function seven_preprocess_admin_block_content(&$variables) {
  if (!empty($variables['content'])) {
    foreach ($variables['content'] as $key => $item) {
      $variables['content'][$key]['url'] = $item['url']->toString();
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu-local-action templates.
 */
function seven_preprocess_menu_local_action(array &$variables) {
  $variables['link']['#options']['attributes']['class'][] = 'button--primary';
  $variables['link']['#options']['attributes']['class'][] = 'button--small';

  // We require Modernizr's touch test for button styling.
  $variables['#attached']['library'][] = 'core/modernizr';
}

/**
 * Implements hook_element_info_alter().
 */
function seven_element_info_alter(&$type) {
  // We require Modernizr for button styling.
  if (isset($type['button'])) {
    $type['button']['#attached']['library'][] = 'core/modernizr';
  }
}

/**
 * Implements hook_preprocess_install_page().
 */
function seven_preprocess_install_page(&$variables) {
  // Seven has custom styling for the install page.
  $variables['#attached']['library'][] = 'seven/install-page';
}

/**
 * Implements hook_preprocess_maintenance_page().
 */
function seven_preprocess_maintenance_page(&$variables) {
  // Seven has custom styling for the maintenance page.
  $variables['#attached']['library'][] = 'seven/maintenance-page';
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for \Drupal\node\NodeForm.
 *
 * Changes vertical tabs to container.
 */
function seven_form_node_form_alter(&$form, FormStateInterface $form_state) {
  $form['#theme'] = ['node_edit_form'];
  $form['#attached']['library'][] = 'seven/node-form';

  $form['advanced']['#type'] = 'container';
  $form['meta']['#type'] = 'container';
  $form['meta']['#access'] = TRUE;
  $form['meta']['changed']['#wrapper_attributes']['class'][] = 'container-inline';
  $form['meta']['author']['#wrapper_attributes']['class'][] = 'container-inline';

  $form['revision_information']['#type'] = 'container';
  $form['revision_information']['#group'] = 'meta';
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for \Drupal\media\MediaForm.
 */
function seven_form_media_form_alter(&$form, FormStateInterface $form_state) {
  // @todo Revisit after https://www.drupal.org/node/2892304 is in. It
  // introduces a footer region to these forms which will allow for us to
  // display a top border over the published checkbox by defining a
  // media-edit-form.html.twig template the same way node does.
  $form['#attached']['library'][] = 'seven/media-form';

}

/**
 * ALL OF THESE CHANGE BELOW ARE SPECIFIC TO THE WWW.UCSF.EDU PROJECT.
 *  - edit the entity embed dialog
 *  - more to come
 *
 */



function seven_editor_link_dialog_form_alter(&$form, FormStateInterface $form_state) {
    /*
    $form['attributes']['class'] = array(
      '#type' => 'select',
      '#options' => array (
        'btn btn-primary' => 'Blue Button',
        'btn-text' => 'Button Text',
        '' => 'None'
      )
    );
    */
}


/**
 * Hook into the entity_embed_dialog
 * Allow additional styles over left, right, center.
 * Add checkbox for whether to use a caption.
 * Filter the Image Style options based on the Image Styles Options patch.
 * https://www.drupal.org/files/issues/2018-09-19/2061377-328.patch
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 */
function seven_form_entity_embed_dialog_alter(&$form, FormStateInterface $form_state) {
  // \Drupal\editor\EditorInterface $editor
  $editor = $form_state->getBuildInfo()['args'][0];

  // \Drupal\image\Plugin\Filter\FilterImageStyle $filter
  $filter = $editor->getFilterFormat()->filters('filter_image_style');
  //get the allowed image style sets from the Image Style Options patch.
  $styles = $filter->getAllowedImageStylesAsOptions();

  // After getting the allowed image styles, filter out options we don't need.
  if (isset($form['attributes']['data-entity-embed-display-settings']['image_style'])) {
    foreach ($form['attributes']['data-entity-embed-display-settings']['image_style']['#options'] as $name => $value) {
      if (!array_key_exists($name, $styles)) {
        unset($form['attributes']['data-entity-embed-display-settings']['image_style']['#options'][$name]);
      }
    }
  }

  // Add the new styles to the Entity Embed popup.
  if (isset($form['attributes']['data-align'])) {
    $form['attributes']['data-align']['#options'] += array (
      'half-image-right' => t('Half Image Right'),
      'half-image-left' => t('Half Image Left'),
      'half-image-right-full' => t('Full Bleed Right'),
      'half-image-left-full' => t('Full Bleed Left'),
      'full-bleed-image' => t('Full Bleed')
    );
    //change the form filed for styles to a select from a radio.
    $form['attributes']['data-align']['#type'] = 'select';
  }

  // Hide caption textarea, add checkbox for adding caption through WYSIWYG.
  if (isset($form['attributes']['data-caption'])) {
    $form['attributes']['data-caption']['#type'] = 'hidden';

    $form['show_caption'] = [
      '#type' => 'checkbox',
      '#title' => 'Show a caption',
      '#description' => 'Warning, unchecking this box will delete any current caption.',
      '#default_value' => !!$form['attributes']['data-caption']['#default_value'],
    ];
  }

  array_unshift($form['#submit'], 'seven_form_entity_embed_dialog_submit');
}

function seven_form_entity_embed_dialog_submit(&$form, FormStateInterface $form_state) {
  // If caption should not be visible.
  $show_caption = $form_state->getValue('show_caption');
  if (!$show_caption) {
    // Clear previous caption.
    $form_state->setValue(['attributes', 'data-caption'], '');
    return;
  }

  // // Store the value of actual caption.
  $current_caption = $form_state->getValue(['attributes', 'data-caption']);
  // Strip all html off.
  $caption_no_html = strip_tags(html_entity_decode($current_caption));
  // Remove any leftover whitespace or non breaking space "%C2%A0".
  $caption_trimmed = trim($caption_no_html, " \t\n\r\0\x0B\xc2\xa0");

  // If caption should be visible, but there is no text, add placeholder text.
  if (empty($caption_trimmed)) {
    $form_state->setValue(['attributes', 'data-caption'], 'Add a caption here.');
  }

}
