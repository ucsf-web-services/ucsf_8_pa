{"version":3,"sources":["ucsf_element_fade.js"],"names":["excludeElements","excludeSelectors","document","querySelectorAll","toString","forEach","element","classList","remove","elementFade","window","observer","IntersectionObserver","entries","entry","intersectionRatio","target","add","unobserve","observe"],"mappings":";;AAAA;;;AAGA,CAAC,YAAY;;AAEX;AACA,MAAMA,kBAAkB,CACtB,yBADsB,EAEtB,oCAFsB,EAGtB,sCAHsB,EAItB,wBAJsB,EAKtB,wBALsB,EAMtB,wBANsB,EAOtB,4CAPsB,EAQtB,8DARsB,CAAxB;;AAWA;AACA,MAAMC,mBAAmBC,SAASC,gBAAT,CAA0BH,gBAAgBI,QAAhB,EAA1B,CAAzB;AACAH,mBAAiBI,OAAjB,CAAyB;AAAA,WAAWC,QAAQC,SAAR,CAAkBC,MAAlB,CAAyB,cAAzB,CAAX;AAAA,GAAzB;;AAEA;AACA,MAAMC,cAAcP,SAASC,gBAAT,CAA0B,eAA1B,CAApB;AACA,MAAI,0BAA0BO,MAA9B,EAAsC;AACpC,QAAMC,WAAW,IAAIC,oBAAJ,CAAyB,mBAAW;AACnDC,cAAQR,OAAR,CAAgB,iBAAS;AACvB,YAAIS,MAAMC,iBAAN,GAA0B,CAA9B,EAAiC;AAC/B;AACAD,gBAAME,MAAN,CAAaT,SAAb,CAAuBU,GAAvB,CAA2B,2BAA3B;AACAN,mBAASO,SAAT,CAAmBJ,MAAME,MAAzB;AACD;AACF,OAND;AAOD,KARgB,CAAjB;;AAUAP,gBAAYJ,OAAZ,CAAoB,mBAAW;AAC7BM,eAASQ,OAAT,CAAiBb,OAAjB;AACD,KAFD;AAGD;AAEF,CApCD","file":"ucsf_element_fade.js","sourcesContent":["/**\n * Animation of elements based on location in the viewport.\n */\n(function () {\n\n  // Elements that should not be animated with a fade\n  const excludeElements = [\n    '.explorer .element-fade',\n    'dom-twocolumn-layout .element-fade',\n    'dom-threecolumn-layout .element-fade',\n    '.column1 .element-fade',\n    '.column2 .element-fade',\n    '.column3 .element-fade',\n    '.field-taxonomy-banner-image .element-fade',\n    '.paragraph--type--gallery  :not(.slick-active) .element-fade'\n  ];\n\n  // Get the NodeList of all the selectors matching elements on the page.\n  const excludeSelectors = document.querySelectorAll(excludeElements.toString());\n  excludeSelectors.forEach(element => element.classList.remove('element-fade'));\n\n  // element to be animated\n  const elementFade = document.querySelectorAll('.element-fade');\n  if ('IntersectionObserver' in window) {\n    const observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        if (entry.intersectionRatio > 0) {\n          // adds the class responsible for animation on the first viewport appearance\n          entry.target.classList.add('element-fade--in-viewport');\n          observer.unobserve(entry.target);\n        }\n      })\n    })\n\n    elementFade.forEach(element => {\n      observer.observe(element);\n    });\n  }\n\n})();\n"]}