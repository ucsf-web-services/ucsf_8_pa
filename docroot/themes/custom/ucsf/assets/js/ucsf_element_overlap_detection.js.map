{"version":3,"sources":["ucsf_element_overlap_detection.js"],"names":["overlaps","element1","element2","a","x1","getBoundingClientRect","top","y1","left","x2","bottom","y2","right","b","overlapTarget","target","elements","overlap","element","$","fixed","document","querySelector","selectors","querySelectorAll","toString","overlapState","hideOnOverlap","classList","add","remove","mql","matchMedia","matches","window","addEventListener","addListener","event","removeEventListener","jQuery"],"mappings":"AAAA;AACA;;AAEA,CAAE,aAAK;;AAEL;;;;;;AAMA,WAASA,QAAT,CAAkBC,QAAlB,EAA4BC,QAA5B,EAAsC;AACpC,QAAMC,IAAI;AACRC,UAAIH,SAASI,qBAAT,GAAiCC,GAD7B;AAERC,UAAIN,SAASI,qBAAT,GAAiCG,IAF7B;AAGRC,UAAIR,SAASI,qBAAT,GAAiCK,MAH7B;AAIRC,UAAIV,SAASI,qBAAT,GAAiCO;AAJ7B,KAAV;AAMA,QAAMC,IAAI;AACRT,UAAIF,SAASG,qBAAT,GAAiCC,GAD7B;AAERC,UAAIL,SAASG,qBAAT,GAAiCG,IAF7B;AAGRC,UAAIP,SAASG,qBAAT,GAAiCK,MAH7B;AAIRC,UAAIT,SAASG,qBAAT,GAAiCO;AAJ7B,KAAV;;AAOA;AACA,QAAIT,EAAEC,EAAF,IAAQS,EAAEJ,EAAV,IAAgBI,EAAET,EAAF,IAAQD,EAAEM,EAA9B,EAAkC,OAAO,KAAP;;AAElC;AACA,QAAIN,EAAEI,EAAF,IAAQM,EAAEF,EAAV,IAAgBE,EAAEN,EAAF,IAAQJ,EAAEQ,EAA9B,EAAkC,OAAO,KAAP;;AAElC,WAAO,IAAP;AACD;;AAED;;;;;;AAMA,WAASG,aAAT,CAAuBC,MAAvB,EAA+BC,QAA/B,EAAyC;AACvC,QAAIC,UAAU,KAAd;;AADuC;AAAA;AAAA;;AAAA;AAGvC,2BAAsBD,QAAtB,8HAAgC;AAAA,YAArBE,OAAqB;;AAC9BD,kBAAUjB,SAASe,MAAT,EAAiBG,OAAjB,CAAV;AACA;AACA,YAAID,YAAY,IAAhB,EAAsB;AACvB;AAPsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOtC;;AAED,WAAOA,OAAP;AACD;;AAED;AACAE,IAAE,YAAM;AACN;AACA,QAAMC,QAAQC,SAASC,aAAT,CAAuB,qBAAvB,CAAd;AACA;AACA,QAAMC,YAAY,CAChB,uBADgB,EAEhB,kBAFgB,EAGhB,mBAHgB,EAIhB,eAJgB,EAKhB,oBALgB,EAMhB,oBANgB,EAOhB,oBAPgB,EAQhB,oBARgB,EAShB,wBATgB,EAUhB,wBAVgB,EAWhB,2BAXgB,CAAlB;;AAcA;AACA,QAAMP,WAAWK,SAASG,gBAAT,CAA0BD,UAAUE,QAAV,EAA1B,CAAjB;;AAEA;AACA,QAAIC,eAAe,IAAnB;;AAEA;;;AAGA,QAAMC,gBAAgB,SAAhBA,aAAgB,GAAM;AAC1B;AACA,UAAMV,UAAUH,cAAcM,KAAd,EAAqBJ,QAArB,CAAhB;;AAEA;AACA,UAAIU,iBAAiBT,OAArB,EAA8B;AAC5BS,uBAAeT,OAAf;;AAEA;AACA,YAAIS,gBAAgB,IAApB,EAA0B;AACxBN,gBAAMQ,SAAN,CAAgBC,GAAhB,CAAoB,4BAApB;AACD,SAFD,MAEO;AACLT,gBAAMQ,SAAN,CAAgBE,MAAhB,CAAuB,4BAAvB;AACD;AACF;AACF,KAfD;;AAiBA;AACA,QAAMC,MAAMC,WAAW,qBAAX,CAAZ;AACA;AACA,QAAID,IAAIE,OAAR,EAAiB;AACfC,aAAOC,gBAAP,CAAwB,QAAxB,EAAkCR,aAAlC;AACD;;AAED;AACAI,QAAIK,WAAJ,CAAgB,iBAAS;AACvB,UAAIC,MAAMJ,OAAV,EAAmB;AACjBC,eAAOC,gBAAP,CAAwB,QAAxB,EAAkCR,aAAlC;AACD,OAFD,MAEO;AACLO,eAAOI,mBAAP,CAA2B,QAA3B,EAAqCX,aAArC;AACD;AACF,KAND;AAQD,GA5DD;AA8DD,CAhHD,EAgHIY,MAhHJ","file":"ucsf_element_overlap_detection.js","sourcesContent":["'use strict';\n// TODO: Throttle the scrolling to increase performance\n\n(($ => {\n\n  /**\n   * Detect if two elements are overlapping.\n   *\n   * @param {HTMLElement} element1\n   * @param {HTMLElement} element2\n   */\n  function overlaps(element1, element2) {\n    const a = {\n      x1: element1.getBoundingClientRect().top,\n      y1: element1.getBoundingClientRect().left,\n      x2: element1.getBoundingClientRect().bottom,\n      y2: element1.getBoundingClientRect().right,\n    };\n    const b = {\n      x1: element2.getBoundingClientRect().top,\n      y1: element2.getBoundingClientRect().left,\n      x2: element2.getBoundingClientRect().bottom,\n      y2: element2.getBoundingClientRect().right,\n    };\n\n    // no horizontal overlap\n    if (a.x1 >= b.x2 || b.x1 >= a.x2) return false;\n\n    // no vertical overlap\n    if (a.y1 >= b.y2 || b.y1 >= a.y2) return false;\n\n    return true;\n  };\n\n  /**\n   * Check if a target element is overlapping with any elements in a given array.\n   *\n   * @param {HTMLElement} target\n   * @param {NodeList} elements\n   */\n  function overlapTarget(target, elements) {\n    let overlap = false;\n\n    for (const element of elements) {\n      overlap = overlaps(target, element);\n      // Exit the loop if an overlap is found.\n      if (overlap === true) break;\n    };\n\n    return overlap;\n  };\n\n  // Wait for the document to be ready.\n  $(() => {\n    // Get the fixed share icons to detect collision against\n    const fixed = document.querySelector('.article-meta-share');\n    // The CSS selectors for anything that the share icons can collide with.\n    const selectors = [\n      '.half-image-left-full',\n      '.half-image-left',\n      '.full-bleed-image',\n      '.callout-left',\n      '.layout-columns__1',\n      '.layout-columns__2',\n      '.layout-columns__3',\n      '.layout-columns__4',\n      '.blockquote-full-width',\n      '.blockquote--half-left',\n      '.paragraph--type--gallery',\n    ];\n\n    // Get the NodeList of all the selectors matching elements on the page.\n    const elements = document.querySelectorAll(selectors.toString());\n\n    // Set the starting state for if there is anything colliding\n    let overlapState = null;\n\n    /**\n     * Hide element if overlap is detected.\n     */\n    const hideOnOverlap = () => {\n      // Check if the fixed box collides with any other boxes.\n      const overlap = overlapTarget(fixed, elements);\n\n      // Check if the state of the overlap has changed.\n      if (overlapState !== overlap) {\n        overlapState = overlap;\n\n        // Add the hidden class to the fixed box if overlapping.\n        if (overlapState == true) {\n          fixed.classList.add('article-meta-share--hidden');\n        } else {\n          fixed.classList.remove('article-meta-share--hidden');\n        }\n      };\n    }\n\n    // Use MatchMedia to ensure that collision events are only happening in Desktop\n    const mql = matchMedia('(min-width: 1050px)');\n    // On page load, check if desktop and listen to scroll event.\n    if (mql.matches) {\n      window.addEventListener(\"scroll\", hideOnOverlap);\n    }\n\n    // When screen size changes, add or remove the scroll listener.\n    mql.addListener(event => {\n      if (event.matches) {\n        window.addEventListener(\"scroll\", hideOnOverlap);\n      } else {\n        window.removeEventListener(\"scroll\", hideOnOverlap);\n      }\n    })\n\n  });\n\n}))(jQuery);\n"]}