@mixin background-image($file-name, $position: middle center, $color: transparent) {
  background: url('/themes/custom/ucsf/assets/images/#{$file-name}') no-repeat $position $color;
}

@mixin button {
  background-color: transparent;
  color: $navy;
  border: 2px solid $navy;
  border-radius: $space-four;
  cursor: pointer;
  line-height: 1.4;
  padding: 1em 1.5em;
  display: inline-block;
  text-decoration: none;
  text-align: center;
  font-family: $font-helvetica-neue-medium;
  min-height: $space-eight;

  &:hover {
    background-color: $c-blue-link;
    color: $white;
    border-color: $c-blue-link;
    transition: $transition-time-short ease background-color;
  }
}

@mixin button-alt {
  @include button;

  border-color: $c-blue-link;
  color: $c-blue-link;
}

@mixin button-alt-2 {
  @include button;

  font-size: 0.8rem;
  font-weight: 600;
  text-transform: none;
}

@mixin clearfix {
  &::after {
    clear: both;
    content: " ";
    display: table;
  }
}

@mixin clearfix-before {
  &::before {
    clear: both;
    content: " ";
    display: table;
  }
}

@mixin clearreset {
  &::after {
    clear: none;
    content: none;
    display: inherit;
  }
}

// use the fordward slash if f is present.
@mixin fa-icon-before($icon-code: '', $color: $c-blue-link) {
  &::before {
    margin-right: 5px;
    color: $color;
    content: '#{$icon-code}';
    font-family: 'Font Awesome 5 Free';
  }
}

// Link mixin
// @param {color} $normal - normal color
// @param {color} $hover  - hover
// @param {color} $active - active
// @param {color} $focus - focus
@mixin link-colors($normal, $hover: false, $active: false, $visited: false, $focus: false) {
  &:link {
    color: $normal;
  }

  @if $visited {
    &:visited,
    &:link:visited {
      color: $visited;
    }
  }

  @else {
    &:visited,
    &:link:visited {
      color: $normal;
    }
  }

  @if $focus {
    &:focus {
      color: $focus;
    }
  }

  @else {
    &:focus {
      color: $normal;
    }
  }

  @if $hover {
    &.active:hover,
    &.is-active:hover,
    &.active-trail:hover,
    &.visited:hover,
    &:hover {
      color: $hover;
    }
  }

  @if $active {
    &.is-active,
    &:active,
    &.active-trail {
      color: $active;
    }
  }

  @else {
    &.is-active,
    &:active,
    &.active-trail {
      color: $normal;
    }
  }
}

@mixin link-text {
  @include link-colors($c-blue-link);
  text-decoration: none;

  &:hover {
    text-decoration: none;
  }
}

@mixin slick-buttons { // Apply to same class as slick().

  &:hover {
    /*
    button {
      //@include visually-hidden-reset;
      @include breakpoint($new-x-small-max) {
        display: none;
      }
    }
    */
  }

  button {
    //@include visually-hidden;
    display: block;
    height: 28px;
    width: 28px;
    background-size: 10px 10px;
    border: 0;
    //border-radius: 28px;
    font-size: 0;
    //overflow: hidden;
    padding: 10px;
    position: absolute;
    text-indent: -999px;
    top: 35%;
    z-index: $z-gallery;

    @include breakpoint($new-x-small-max) {
      display: none;
    }
    @include breakpoint($bp-small) {
      top: 30%;
    }

    @include breakpoint($bp-medium) {
      top: 35%;
    }

    &:after {
      content: none;
    }

    &:hover {
      //background-color: $c-navy;
    }
  }

  .slick-next {
    @include background-image('cta-arrow-white.svg', center center/12px 12px , $c-blue-link);
    right: 35px;
  }

  .slick-prev {
    @include background-image('cta-arrow-white-left.svg', center center/12px 12px , $c-blue-link);
    left: 35px;
  }

}

// Use when unable to add class .link--cta
@mixin link--cta {
  @include link-text();
  display: inline-block;
  transition: .2s ease-out background-position;

  &:hover {
    background-position: 100% 60%;
  }
}

// Requirements: link text color is $c-blue-link
// Arrow icon follows link text
// Link text, and background image are both at the left edge of the parent element, so that
// there is room for the icon to move right on hover
@mixin arrow-c-blue-after-text {
  background-image: url("../images/cta-arrow.svg");
  // if arrow is too close to text, adjust background-position-x
  background-position: 96% 60%;
  background-repeat: no-repeat;
  background-color: transparent;
  background-size: 14px 14px;
  padding-right: 24px;
}

// TODO @mixin arrow-c-blue-right-edge
// for links where text is at the left edge of the element
// and background image is at the right edge of the element
// icon still needs to move right on hover, link text should stay in place
@mixin arrow-c-white {
  color: $white;
  background-image: url("../images/cta-arrow-white.svg");
}

@mixin tables {
  .table-wrapper-responsive {
    overflow: scroll;

    @include breakpoint($bp-large) {
      overflow: auto;
    }
  }

  // Tables
  table,
  td,
  th {
    border: 1px solid $c-beige;
  }

  table {
    margin-bottom: 50px;
    width: 100%;
  }

  th,
  .table-header {
    font-size: 15px;
    line-height: 18px;
    text-align: left;
    vertical-align: top;
  }

  td,
  th {
    padding: 6px;
    vertical-align: top;
  }
}

@mixin transition {
  transition: .2s ease-out all;
}

@mixin transitionset($time) {
  transition: $time ease-out all;
}
// Normal List Styles
@mixin ul-text {
  ul,
  ol {
    li {
      line-height: 22px;
      margin-bottom: 15px;
    }
  }
}

// Remove all ul-styling from .item-list.
@mixin ul-item-list-reset {
  margin: 0;

  ul {
    margin: 0;
  }

  li {
    margin: 0;
  }

  ul,
  li {
    line-height: inherit;
    list-style: none;
    padding: 0;
  }
}

// Apply to <ul> tag.
@mixin ul-menu {
  &.menu {
    list-style: none;
    margin-bottom: 0;
    margin-left: 0;
    margin-top: -1px;
    padding-left: 0;

    li {
      list-style: none;
    }
  }
}

@mixin visually-hidden {
  position: absolute !important;
  clip: rect(1px, 1px, 1px, 1px);
  overflow: hidden;
  height: 1px;
  width: 1px;
  word-wrap: normal;
}

@mixin visually-hidden-reset {
  clip: auto;
  overflow: visible;
  //position: absolute !important;
  //word-wrap: normal;
}

/// Mixin - Wrapper
/// Outer container mixin for large screens
@mixin wrapper($container-max-width: $bp-full, $outer-container-break: $bp-small, $v-margin: 0, $v-padding: 0, $h-padding: $space, $h-padding-large: $h-padding) {
  max-width: #{$container-max-width};
  width: 100%;
  margin: #{$v-margin} auto;
}

/**
* Have to put my @mixins for animations here otherwise gulp goes caput...
*/
@mixin menu-animation {
  -webkit-animation: menu-slide 500ms cubic-bezier(0.77, 0, 0.175, 1) 50ms both;
  animation: menu-slide 500ms cubic-bezier(0.77, 0, 0.175, 1) 50ms both;
}

/**
* Creates .[parent class].[$color-application]-[color] class chain and applies corresponding box-shadow or background color
* For example .emergency-alert.overlay-gray or .emergency-alert.background-gray
*/
  // Get color value from color-map array (@tools/_variables.scss)
@mixin colored($color-application:"background") {
  @each $name, $color in $color-map {
    // create a class name based on the color name
    &.#{$color-application}-#{$name} {
      @if ($color-application == "background") {
        background-color: $color;
      }

      @if ($color-application == "overlay")  {
        // convert hex value into rgba box-shadow
        box-shadow: inset 0 0 0 1000px rgba($color, 0.8);
        &:hover {
          box-shadow: inset 0 0 0 1000px rgba($color, 0.95);
        }
      }
    }
  }
}
