{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished'
  ]
%}

{# To add/remove background color value
  /admin/structure/paragraphs_type/parallax_image_with_text_overlay/fields/paragraph.parallax_image_with_text_overlay.field_overlay_color/storage

  Setting field_overlay_color "Manage display" format to "key", iterating through those keys (a.k.a. item.value) and using them as classes
#}
{% set overlay_class = '' %}
{% if content.field_overlay_color.0|render %}
  {% for key, item in paragraph.field_overlay_color if key|first != '#' %}
    {% set overlay_class = overlay_class ~ " " ~ item.value %}
  {% endfor %}
{% endif %}

{% block paragraph %}
{{ attach_library('ucsf/ucsf_parallax_image_with_text_overlay') }}
	<div{{attributes.addClass(classes)}}>
		{% block content %}
      <section class="scrolly-gallery__item">

        {% if content.field_mobile_square.0 %}
          <figure class="scrolly-gallery__bg scrolly-gallery__bg--small-screen">
            {{ content.field_mobile_square.0}}
          </figure>
        {% endif %}

        {% if content.field_image_media.0 %}
          <figure class="scrolly-gallery__step scrolly-gallery__bg scrolly-gallery__bg--desktop">
            {{ content.field_image_media.0}}
          </figure>
        {% endif %}


        <div class="scrolly-gallery__step scrolly-gallery__text background-{{overlay_class|trim}}">
          {# <div class="scrolly-gallery__text-overlay background-{{overlay_class|trim}}"></div> #}
          <div class="scrolly-gallery__text-inner">
            {# <div class="scrolly-gallery__flexbox-wrapper"> #}
              {{ content.field_image_caption.0 }}
            {# </div> #}
          </div>
        </div>
      </section>

      {{content|without(
        "field_image_media", "field_image_caption", "field_overlay_color", "field_mobile_square"
      )}}
		{% endblock %}
	</div>
{% endblock paragraph %}
