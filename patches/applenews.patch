diff --git a/docroot/modules/contrib/applenews/applenews.info.yml b/docroot/modules/contrib/applenews/applenews.info.yml
index fba5d81c5..9bdc6397a 100644
--- a/docroot/modules/contrib/applenews/applenews.info.yml
+++ b/docroot/modules/contrib/applenews/applenews.info.yml
@@ -1,13 +1,8 @@
 name: Apple News
 description: Push content to Apple News.
 type: module
-# core: 8.x
+core: 8.x
 package: Apple News
+configure: applenews.settings
 dependencies:
   - drupal:serialization
-
-# Information added by Drupal.org packaging script on 2018-10-27
-version: '8.x-1.0-beta1'
-core: '8.x'
-project: 'applenews'
-datestamp: 1540682287
diff --git a/applenews.install b/applenews.install
new file mode 100644
index 000000000..2023973c7
--- /dev/null
+++ b/applenews.install
@@ -0,0 +1,20 @@
+<?php
+
+/**
+ * @file
+ * Apple News module install file.
+ */
+
+
+/**
+ * Implements hook_requirements().
+ */
+function applenews_requirements() {
+  $hasZip = extension_loaded('zip');
+  $requirements['applenews.zip']  = [
+    'title' => 'PHP Zip',
+    'description' => 'Php-zip is required by the applenews module in order to create previews',
+    'severity' => $hasZip ? REQUIREMENT_OK : REQUIREMENT_WARNING,
+  ];
+  return $requirements;
+}
diff --git a/applenews.module b/applenews.module
index 0eb313fc7..6c8ecddc9 100644
--- a/applenews.module
+++ b/applenews.module
@@ -6,11 +6,38 @@
  */
 
 use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\migrate\MigrateSkipRowException;
 use Drupal\migrate\Plugin\MigrateSourceInterface;
 use Drupal\migrate\Plugin\MigrationInterface;
 use Drupal\migrate\Row;
 
+/**
+ * Implements hook_help().
+ */
+function applenews_help($route_name, RouteMatchInterface $route_match) {
+  switch ($route_name) {
+    case 'help.page.applenews':
+      $output = '';
+      $output .= '<h3>' . t('About') . '</h3>';
+      $output .= '<p>' . t('Apple News module provides an easy way to get your Drupal site\'s content into Apple News.') . '</p>';
+      $output .= '<h3>' . t('Key features') . '</h3>';
+      $output .= '<ul>';
+      $output .= '<li>' . t('Build custom Apple News layout.') . '</li>';
+      $output .= '<li>' . t('Ability to export content to preview in the News Preview application.') . '</li>';
+      $output .= '<li>' . t('Bulk export to Apple News.') . '</li>';
+      $output .= '<li>' . t('Export individual content to Apple News.') . '</li>';
+      $output .= '<li>' . t('Integration with Views allows to build custom reports.') . '</li>';
+      $output .= '<li>' . t('Built-in plugin system allows extend module components by adding support to almost any field types.') . '</li>';
+      $output .= '</ul>';
+      $output .= '<h3>' . t('Dependencies') . '</h3>';
+      $output .= '<p>' . t('Apple News requires the Serialization module (in Web Services) to be installed.') . '</p>';
+      $output .= '<h3>' . t('More Help') . '</h3>';
+      $output .= '<p>' . t('For more help, please consult the README.MD file in the applenews module folder.') . '</p>';
+      return $output;
+  }
+}
+
 /**
  * Implements hook_entity_insert().
  */
diff --git a/applenews.routing.yml b/applenews.routing.yml
index 8003322cc..88c1c68a4 100644
--- a/applenews.routing.yml
+++ b/applenews.routing.yml
@@ -119,12 +119,16 @@ applenews.preview_download:
         type: entity:{entity_type}
 
 applenews.remote.article_delete:
-  path: '/admin/config/services/applenews/remote/{channel_id}/{article_id}/delete'
+  path: '/admin/config/services/applenews/remote/{entity_type}/{entity}/delete'
   defaults:
-    _form: 'Drupal\applenews\Form\SettingsForm'
+    _form: 'Drupal\applenews\Form\AppleNewsArticleDeleteForm'
     _title: 'Delete article'
   requirements:
     _permission: 'administer applenews configuration'
+  options:
+    parameters:
+      entity:
+        type: entity:{entity_type}
 
 # Settings.
 applenews.settings:
diff --git a/src/ApplenewsManager.php b/src/ApplenewsManager.php
index 0b3128623..a52db8b2b 100644
--- a/src/ApplenewsManager.php
+++ b/src/ApplenewsManager.php
@@ -2,8 +2,10 @@
 
 namespace Drupal\applenews;
 
+use ChapterThree\AppleNewsAPI\Document\Components\Text;
 use Drupal\applenews\Entity\ApplenewsArticle;
 use Drupal\Component\Serialization\Json;
+use Drupal\Component\Utility\Html;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityInterface;
@@ -232,7 +234,10 @@ public function delete(EntityInterface $entity) {
     foreach ($fields as $field_name => $detail) {
       $article = self::getArticle($entity, $field_name);
       if ($article) {
+        // Delete article from remote.
         $this->doDelete($article->getArticleId());
+        // Delete corresponding applenews_article entity.
+        $article->delete();
       }
     }
   }
@@ -291,10 +296,19 @@ protected function doPost($channel_id, array $data) {
    * @return string
    *   JSON string document.
    */
-  protected function getDocumentDataFromEntity(EntityInterface $entity, $template) {
+  public function getDocumentDataFromEntity(EntityInterface $entity, $template) {
+    global $base_url;
     $context['template_id'] = $template;
     /** @var \ChapterThree\AppleNewsAPI\Document $document */
     $document = $this->serializer->normalize($entity, 'applenews', $context);
+
+    /** @var \ChapterThree\AppleNewsAPI\Document\Components\Text $component */
+    foreach ($document['components'] as $index => $component) {
+      if (!$component instanceof Text) {
+        continue;
+      }
+      $component->setText(Html::transformRootRelativeUrlsToAbsolute($component->getText(), $base_url));
+    }
     return Json::encode($document);
   }
 
diff --git a/src/ApplenewsPreviewBuilder.php b/src/ApplenewsPreviewBuilder.php
index 1002b0194..976d68e24 100644
--- a/src/ApplenewsPreviewBuilder.php
+++ b/src/ApplenewsPreviewBuilder.php
@@ -353,7 +353,7 @@ private function createArchive(array $entity_ids = []) {
       }
 
       // Open archive.
-      $result = $zip->open($entity_archive, \ZipArchive::CREATE | \ZipArchive::CREATE);
+      $result = $zip->open($entity_archive, \ZipArchive::CREATE | \ZipArchive::OVERWRITE);
       if ($result !== TRUE) {
         throw new \Exception('Could not open archive file: ' . $this->zipErrorMsg($result));
       }
diff --git a/src/Controller/ApplenewsPreviewController.php b/src/Controller/ApplenewsPreviewController.php
index 4e237c530..19829dac6 100644
--- a/src/Controller/ApplenewsPreviewController.php
+++ b/src/Controller/ApplenewsPreviewController.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\applenews\Controller;
 
+use Drupal\applenews\ApplenewsManager;
 use Drupal\applenews\ApplenewsPreviewBuilder;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Controller\ControllerBase;
@@ -39,6 +40,13 @@ class ApplenewsPreviewController extends ControllerBase {
    */
   protected $previewBuilder;
 
+  /**
+   * Apple News Manager.
+   *
+   * @var \Drupal\applenews\ApplenewsManager
+   */
+  protected $applenewsManager;
+
   /**
    * ApplenewsPreviewController constructor.
    *
@@ -48,11 +56,14 @@ class ApplenewsPreviewController extends ControllerBase {
    *   Serializer object.
    * @param \Drupal\applenews\ApplenewsPreviewBuilder $preview_builder
    *   Preview builder object.
+   * @param \Drupal\applenews\ApplenewsManager $manager
+   *   Apple news manager.
    */
-  public function __construct(LoggerInterface $logger, Serializer $serializer, ApplenewsPreviewBuilder $preview_builder) {
+  public function __construct(LoggerInterface $logger, Serializer $serializer, ApplenewsPreviewBuilder $preview_builder, ApplenewsManager $manager) {
     $this->logger = $logger;
     $this->serializer = $serializer;
     $this->previewBuilder = $preview_builder;
+    $this->applenewsManager = $manager;
   }
 
   /**
@@ -62,7 +73,8 @@ public static function create(ContainerInterface $container) {
     return new static(
       $container->get('logger.channel.applenews'),
       $container->get('serializer'),
-      $container->get('applenews.preview_builder')
+      $container->get('applenews.preview_builder'),
+      $container->get('applenews.manager')
     );
   }
 
@@ -82,14 +94,12 @@ public static function create(ContainerInterface $container) {
    *   Response object.
    */
   public function preview($entity_type, EntityInterface $entity, $revision_id, $template_id) {
-    $context['template_id'] = $template_id;
     $filename = NULL;
     $entity_archive = TRUE;
     $entity_id = $entity->id();
-    $entity_ids = [$entity_id];
 
-    $data = $this->getDataArray($entity, $context);
-    $this->exportToFile($entity_id, $entity_ids, $filename, $entity_archive, $data);
+    $data = $this->getDataArray($entity, $template_id);
+    $this->export($entity_id, $filename, $entity_archive, $data);
     $archive_path = $this->exportFilePath($entity_id);
     $archive = $archive_path . '.zip';
 
@@ -106,18 +116,17 @@ public function preview($entity_type, EntityInterface $entity, $revision_id, $te
    *
    * @param \Drupal\Core\Entity\EntityInterface $entity
    *   Entity article attached to.
-   * @param array $context
-   *   An array of context.
+   * @param string $template_id
+   *   String template ID.
    *
    * @return array
    *   An array of article data.
    */
-  protected function getDataArray(EntityInterface $entity, array $context) {
-    /** @var \ChapterThree\AppleNewsAPI\Document $document */
-    $document = $this->serializer->normalize($entity, 'applenews', $context);
+  protected function getDataArray(EntityInterface $entity, $template_id) {
+    $document = $this->applenewsManager->getDocumentDataFromEntity($entity, $template_id);
 
     return [
-      'json' => Json::encode($document),
+      'json' => $document,
       'files' => [],
     ];
   }
@@ -127,8 +136,6 @@ protected function getDataArray(EntityInterface $entity, array $context) {
    *
    * @param int $entity_id
    *   Entity ID.
-   * @param array $entity_ids
-   *   An array of entity IDs.
    * @param string $filename
    *   String filename.
    * @param string $entity_archive
@@ -136,33 +143,51 @@ protected function getDataArray(EntityInterface $entity, array $context) {
    * @param array $data
    *   An array of article dta.
    *
-   * @return int|null|string
-   *   NULL if successful. URL for group of entities.
+   * @return null|string
+   *   URL of the archive file if available, NULL otherwise.
    */
-  protected function exportToFile($entity_id, array $entity_ids, $filename, $entity_archive, array $data) {
+  protected function export($entity_id, $filename, $entity_archive, array $data) {
     $preview = $this->previewBuilder->setEntity($entity_id, $filename, $entity_archive, $data);
 
-    if (!empty($entity_id)) {
-      $preview->toFile();
+    $file_url = $preview->getArchiveFilePath();
+    $preview->toFile();
       try {
-        $preview->archive($entity_ids);
-      }
-      catch (\Exception $e) {
-        $this->logger->error('Could not create archive: @err', ['@err' => $e->getMessage()]);
-      }
-      return NULL;
-    }
-    else {
-      $file_url = $preview->getArchiveFilePath();
-      try {
-        $preview->archive($entity_ids);
+        $preview->archive([$entity_id]);
       }
       catch (\Exception $e) {
         $this->logger->error('Could not create archive: @err', ['@err' => $e->getMessage()]);
         return NULL;
       }
       return $file_url;
+  }
+
+  /**
+   * Export articles to file.
+   *
+   * @param array $entity_ids
+   *   An array of entity IDs.
+   * @param string $filename
+   *   String filename.
+   * @param string $entity_archive
+   *   String path.
+   * @param array $data
+   *   An array of article dta.
+   *
+   * @return null|string
+   *   URL of the archive file if available, NULL otherwise.
+   */
+  protected function exportMultiple(array $entity_ids, $filename, $entity_archive, array $data) {
+    $preview = $this->previewBuilder->setEntity(NULL, $filename, $entity_archive, $data);
+
+    $file_url = $preview->getArchiveFilePath();
+    try {
+      $preview->archive($entity_ids);
+    }
+    catch (\Exception $e) {
+      $this->logger->error('Could not create archive: @err', ['@err' => $e->getMessage()]);
+      return NULL;
     }
+    return $file_url;
   }
 
   /**
diff --git a/src/Entity/ApplenewsTemplate.php b/src/Entity/ApplenewsTemplate.php
index b862588dd..5514af6ab 100644
--- a/src/Entity/ApplenewsTemplate.php
+++ b/src/Entity/ApplenewsTemplate.php
@@ -102,7 +102,9 @@ public function getComponent($id) {
       if ($id == $component_id) {
         return $component;
       }
-      if ($found = $this->getNestedComponent($component['component_data']['components'], $id)) {
+      if (!empty($component['component_data']['components']) &&
+        $found = $this->getNestedComponent($component['component_data']['components'], $id)
+      ) {
         return $found;
       }
     }
@@ -145,17 +147,13 @@ public function addComponent(array $component) {
    * {@inheritdoc}
    */
   public function deleteComponent($id) {
-    foreach ($this->components as $component_id => &$component) {
-      if ($id == $component_id) {
-        unset($this->components[$id]);
-        return TRUE;
-      }
-      if ($this->deleteNestedComponent($component['component_data']['components'], $id)) {
-        return TRUE;
+    if ($this->deleteNestedComponent($this->components, $id)) {
+      if (!empty($this->components)) {
+        uasort($this->components, [$this, 'sortHelper']);
       }
-
+      return TRUE;
     }
-    uasort($components, [$this, 'sortHelper']);
+    return FALSE;
   }
 
   /**
@@ -178,7 +176,9 @@ protected function deleteNestedComponent(array &$components, $id) {
         }
         return TRUE;
       }
-      if ($this->deleteNestedComponent($component['component_data']['components'], $id)) {
+      if (!empty($component['component_data']['components']) &&
+        $this->deleteNestedComponent($component['component_data']['components'], $id)
+      ) {
         return TRUE;
       }
     }
diff --git a/src/Form/AppleNewsArticleDeleteForm.php b/src/Form/AppleNewsArticleDeleteForm.php
new file mode 100644
index 000000000..62aeae6e3
--- /dev/null
+++ b/src/Form/AppleNewsArticleDeleteForm.php
@@ -0,0 +1,70 @@
+<?php
+
+namespace Drupal\applenews\Form;
+
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Form\ConfirmFormBase;
+use Drupal\Core\Form\FormStateInterface;
+
+/**
+ * Builds the form to delete a Apple News article.
+ *
+ * @internal
+ */
+class AppleNewsArticleDeleteForm extends ConfirmFormBase {
+
+  /**
+   * @var \Drupal\Core\Entity\ContentEntityInterface
+   */
+  protected $entity;
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getFormId() {
+    return 'applenews_article_confirm_delete';
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getQuestion() {
+    return $this->t('Are you sure you want to delete the Apple News article %label?', ['%label' => $this->entity->label()]);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getCancelUrl() {
+    return $this->entity->toUrl('edit-form');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getConfirmText() {
+    return $this->t('Delete');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function buildForm(array $form, FormStateInterface $form_state, $entity_type = NULL, ContentEntityInterface $entity = NULL) {
+    $this->entity = $entity;
+
+    return parent::buildForm($form, $form_state);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function submitForm(array &$form, FormStateInterface $form_state) {
+    /** @var \Drupal\applenews\ApplenewsManager $applenews_manager */
+    $applenews_manager = \Drupal::service('applenews.manager');
+    $applenews_manager->delete($this->entity);
+
+    $this->messenger()->addStatus($this->t('%label has been deleted from Apple News.', ['%label' => $this->entity->label()]));
+    $form_state->setRedirectUrl($this->getCancelUrl());
+  }
+
+}
diff --git a/src/Form/ApplenewsTemplateForm.php b/src/Form/ApplenewsTemplateForm.php
index dc4488098..8f0f7fff9 100644
--- a/src/Form/ApplenewsTemplateForm.php
+++ b/src/Form/ApplenewsTemplateForm.php
@@ -184,16 +184,18 @@ public function form(array $form, FormStateInterface $form_state) {
     ];
 
     $rows = [];
-    foreach ($components as $id => $component) {
-      $rows[$id] = $this->getComponentRow($component, $form_state);
-      $component_plugin = $this->applenewsComponentTypeManager->createInstance($component['id']);
-      // If not a nested component, it cannot be a parent of other components.
-      if ($component_plugin->getComponentType() != 'nested') {
-        $rows[$id]['#attributes']['class'][] = 'tabledrag-leaf';
-      }
-      else {
-        $rows += $this->getChildComponentRows($component, $form_state);
-        $rows[$id]['type']['#markup'] = '<strong>' . $component['id'] . '</strong>';
+    if (!empty($components)) {
+      foreach ($components as $id => $component) {
+        $rows[$id] = $this->getComponentRow($component, $form_state);
+        $component_plugin = $this->applenewsComponentTypeManager->createInstance($component['id']);
+        // If not a nested component, it cannot be a parent of other components.
+        if ($component_plugin->getComponentType() != 'nested') {
+          $rows[$id]['#attributes']['class'][] = 'tabledrag-leaf';
+        }
+        else {
+          $rows += $this->getChildComponentRows($component, $form_state);
+          $rows[$id]['type']['#markup'] = '<strong>' . $component['id'] . '</strong>';
+        }
       }
     }
 
diff --git a/src/Normalizer/ApplenewsTextComponentNormalizer.php b/src/Normalizer/ApplenewsTextComponentNormalizer.php
index 10e4ca418..ffd58471f 100644
--- a/src/Normalizer/ApplenewsTextComponentNormalizer.php
+++ b/src/Normalizer/ApplenewsTextComponentNormalizer.php
@@ -9,6 +9,13 @@
  */
 class ApplenewsTextComponentNormalizer extends ApplenewsComponentNormalizerBase {
 
+  /**
+   * HTML tags allowed by Apple News JSON.
+   *
+   * @see https://developer.apple.com/documentation/apple_news/apple_news_format/components/using_html_with_apple_news_format
+   */
+  const ALLOWED_HTML_ELEMENTS = '<p><strong><b><em><i><a><ul><ol><li><br><sub><sup><del><s><pre><code><samp><footer><aside><blockquote>';
+
   /**
    * Component type.
    *
@@ -26,6 +33,9 @@ public function normalize($data, $format = NULL, array $context = []) {
     $field_name = $data['component_data']['text']['field_name'];
     $context['field_property'] = $data['component_data']['text']['field_property'];
     $text = $this->serializer->normalize($entity->get($field_name), $format, $context);
+    if ($data['component_data']['format'] == 'html') {
+      $text = strip_tags($text, self::ALLOWED_HTML_ELEMENTS);
+    }
     $component = new $component_class($text);
 
     $component->setFormat($data['component_data']['format']);
diff --git a/src/Plugin/Field/FieldWidget/Applenews.php b/src/Plugin/Field/FieldWidget/Applenews.php
index 361d4c4b2..4f1521a53 100644
--- a/src/Plugin/Field/FieldWidget/Applenews.php
+++ b/src/Plugin/Field/FieldWidget/Applenews.php
@@ -30,13 +30,42 @@ class Applenews extends WidgetBase {
   public function formElement(FieldItemListInterface $items, $delta, array $element, array &$form, FormStateInterface $form_state) {
     $field_name = $items->getName();
     $default_channels = unserialize($items[$delta]->channels);
+    $channels = $this->getChannels();
+
     /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
     $entity = $items->getEntity();
     $element['#attached']['library'][] = 'applenews/drupal.applenews.admin';
     $templates = $this->getTemplates($entity);
     $article = ApplenewsManager::getArticle($entity, $field_name);
 
-    if (!$templates) {
+    if (empty($channels)) {
+      $element['message'] = [
+        '#markup' => $this->t('There are no channels available. To set up a channel, review the <a href=":url">Apple news Settings</a>.', [':url' => Url::fromRoute('entity.applenews_template.collection')->toString()]),
+      ];
+      if (extension_loaded('zip') && $templates && $entity->id()) {
+        $element['preview'] = [
+          '#type' => 'item',
+          '#title' => $this->t('Preview'),
+          '#markup' => $this->t('Download the Apple News generated document (use the News Preview app to preview the article): <ul>', []),
+        ];
+        foreach ($templates as $template_id => $template) {
+          $url_preview = Url::fromRoute('applenews.preview_download', [
+            'entity_type' => $entity->getEntityTypeId(),
+            'entity' => $entity->id(),
+            'revision_id' => $entity->getLoadedRevisionId(),
+            'template_id' => $template_id,
+          ]);
+
+          // @todo: Fix route, to support other than node.
+          $element['preview']['#markup'] .= ' <li>' . $this->t('<a href=":url">:label</a> template</li>', [
+            ':url' => $url_preview->toString(),
+            ':label' => $template,
+          ]);
+        }
+        $element['preview']['#markup'] .= '</ul>';
+      }
+    }
+    elseif (!$templates) {
       $element['message'] = [
         '#markup' => $this->t('Add a template to %type type. Check Apple news Template <a href=":url">configuration</a> page.', ['%type' => $entity->bundle(), ':url' => Url::fromRoute('entity.applenews_template.collection')->toString()]),
       ];
@@ -68,7 +97,7 @@ public function formElement(FieldItemListInterface $items, $delta, array $elemen
           '#title' => $this->t('Share URL'),
           '#markup' => $this->t('<a href=":url">:url</a>', [':url' => $article->getShareUrl()]),
         ];
-        $delete_url = Url::fromRoute('applenews.remote.article_delete', ['channel_id' => '121-12121-sdf-121', 'article_id' => $article->getArticleId()]);
+        $delete_url = Url::fromRoute('applenews.remote.article_delete', ['entity_type' => $entity->getEntityTypeId(), 'entity' => $entity->id()]);
         $element['delete'] = [
           '#type' => 'item',
           '#title' => $this->t('Delete'),
@@ -113,6 +142,9 @@ public function formElement(FieldItemListInterface $items, $delta, array $elemen
             'visible' => [
               ':input[name="' . $items->getName() . '[' . $delta . '][status]"]' => ['checked' => TRUE],
             ],
+            'checked' => [
+              ':input[data-section-of="' . $channel_key . '"]' => ['checked' => TRUE],
+            ],
           ],
         ];
         foreach ($channel->getSections() as $section_id => $section_label) {
@@ -145,7 +177,7 @@ public function formElement(FieldItemListInterface $items, $delta, array $elemen
           ],
         ],
       ];
-      if ($article) {
+      if ($article && extension_loaded('zip')) {
         $url_preview = Url::fromRoute('applenews.preview_download', [
           'entity_type' => $entity->getEntityTypeId(),
           'entity' => $entity->id(),
diff --git a/tests/src/Functional/ApplenewsTemplateAdminTest.php b/tests/src/Functional/ApplenewsTemplateAdminTest.php
index e047f6932..37ca7ed18 100644
--- a/tests/src/Functional/ApplenewsTemplateAdminTest.php
+++ b/tests/src/Functional/ApplenewsTemplateAdminTest.php
@@ -34,7 +34,7 @@ public function testAppleNewsTemplateAdminPages() {
     // Verify overview page has empty message by default.
     $this->drupalGet('admin/config/services/applenews');
     $assert_session->statusCodeEquals(200);
-    $assert_session->pageTextNotContains('There are no applenews template entities yet.');
+    $assert_session->pageTextContains('There are no applenews template entities yet.');
 
     $assert_session->linkExists('Add Apple News Template');
   }

