diff --git a/metatag_open_graph/src/Plugin/metatag/Tag/OgDescription.php b/metatag_open_graph/src/Plugin/metatag/Tag/OgDescription.php
index a3b01ff..f142d5a 100644
--- a/metatag_open_graph/src/Plugin/metatag/Tag/OgDescription.php
+++ b/metatag_open_graph/src/Plugin/metatag/Tag/OgDescription.php
@@ -16,7 +16,7 @@ use Drupal\metatag\Plugin\metatag\Tag\MetaPropertyBase;
  *   weight = 6,
  *   type = "label",
  *   secure = FALSE,
- *   multiple = FALSE,
+ *   multiple = TRUE,
  *   long = TRUE,
  * )
  */
diff --git a/metatag_open_graph/src/Plugin/metatag/Tag/OgTitle.php b/metatag_open_graph/src/Plugin/metatag/Tag/OgTitle.php
index 8929887..4ffc36b 100644
--- a/metatag_open_graph/src/Plugin/metatag/Tag/OgTitle.php
+++ b/metatag_open_graph/src/Plugin/metatag/Tag/OgTitle.php
@@ -16,7 +16,7 @@ use Drupal\metatag\Plugin\metatag\Tag\MetaPropertyBase;
  *   weight = 4,
  *   type = "label",
  *   secure = FALSE,
- *   multiple = FALSE
+ *   multiple = TRUE
  * )
  */
 class OgTitle extends MetaPropertyBase {
diff --git a/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsDescription.php b/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsDescription.php
index eb3cdbb..0d5d67e 100644
--- a/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsDescription.php
+++ b/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsDescription.php
@@ -16,7 +16,7 @@ use Drupal\metatag\Plugin\metatag\Tag\MetaNameBase;
  *   weight = 2,
  *   type = "label",
  *   secure = FALSE,
- *   multiple = FALSE
+ *   multiple = TRUE
  * )
  */
 class TwitterCardsDescription extends MetaNameBase {
diff --git a/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsImage.php b/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsImage.php
index bcb307c..f916e82 100644
--- a/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsImage.php
+++ b/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsImage.php
@@ -16,7 +16,7 @@ use Drupal\metatag\Plugin\metatag\Tag\MetaNameBase;
  *   weight = 7,
  *   type = "image",
  *   secure = FALSE,
- *   multiple = FALSE,
+ *   multiple = TRUE,
  *   absolute_url = TRUE
  * )
  */
diff --git a/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsTitle.php b/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsTitle.php
index 268dfa4..45be445 100644
--- a/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsTitle.php
+++ b/metatag_twitter_cards/src/Plugin/metatag/Tag/TwitterCardsTitle.php
@@ -16,7 +16,7 @@ use Drupal\metatag\Plugin\metatag\Tag\MetaNameBase;
  *   weight = 2,
  *   type = "label",
  *   secure = FALSE,
- *   multiple = FALSE
+ *   multiple = TRUE
  * )
  */
 class TwitterCardsTitle extends MetaNameBase {
diff --git a/src/MetatagManager.php b/src/MetatagManager.php
index 18cac19..168829c 100644
--- a/src/MetatagManager.php
+++ b/src/MetatagManager.php
@@ -591,8 +591,25 @@ class MetatagManager implements MetatagManagerInterface {
           }

           foreach ($output as $index => $element) {
-            // Add index to tag name as suffix to avoid having same key.
-            $index_tag_name = $tag->multiple() ? $tag_name . '_' . $index : $tag_name;
+            // UCSFD8-323 - only display the first valid token from left to right order in the Metatag field(s)
+            $single_tags = ['image_src','og_title','og_description','og_image', 'og_image_secure_url','twitter_cards_title','twitter_cards_description','twitter_cards_image'];
+            // String elements might be empty, so we need to skip over those
+            if (in_array($tag_name, $single_tags)) {
+              if ((isset($element['#attributes']['content']) && trim($element['#attributes']['content']) == '')
+                || (isset($element['#attributes']['href']) && trim($element['#attributes']['href']) == '')
+              ) {
+                continue;
+              }
+              // Check if raw tag is created there should only be one value
+              if (isset($rawTags[$tag_name])) {
+                continue;
+              }
+              // Create a tag with no index appendended
+              $index_tag_name = $tag_name;
+            } else {
+              // Add index to tag name as suffix to avoid having same key.
+              $index_tag_name = $tag->multiple() ? $tag_name . '_' . $index : $tag_name;
+            }
             $rawTags[$index_tag_name] = $element;
           }
         }
diff --git a/src/Plugin/metatag/Tag/ImageSrc.php b/src/Plugin/metatag/Tag/ImageSrc.php
index 6c9fe3e..380993b 100644
--- a/src/Plugin/metatag/Tag/ImageSrc.php
+++ b/src/Plugin/metatag/Tag/ImageSrc.php
@@ -14,7 +14,7 @@ namespace Drupal\metatag\Plugin\metatag\Tag;
  *   weight = 4,
  *   type = "image",
  *   secure = FALSE,
- *   multiple = FALSE
+ *   multiple = TRUE
  * )
  */
 class ImageSrc extends LinkRelBase {
diff --git a/src/Plugin/metatag/Tag/LinkRelBase.php b/src/Plugin/metatag/Tag/LinkRelBase.php
index 449ce2f..7300958 100644
--- a/src/Plugin/metatag/Tag/LinkRelBase.php
+++ b/src/Plugin/metatag/Tag/LinkRelBase.php
@@ -12,6 +12,24 @@ abstract class LinkRelBase extends MetaNameBase {
    */
   public function output() {
     $element = parent::output();
+    $element = $this->convertToLink($element);
+    // if $element is an array of multiple elements.
+    if (empty($element['#attributes'])) {
+      foreach ($element as $key => $value) {
+        $element[$key] = $this->convertToLink($value);
+      }
+    }
+
+    return $element;
+  }
+
+  /**
+   * Function to convert Metatag into link.
+   *
+   * @param [array] $element
+   * @return array
+   */
+  public function convertToLink($element) {
     if (!empty($element['#attributes']['content'])) {
       $element['#tag'] = 'link';
       $element['#attributes'] = [
diff --git a/src/Plugin/metatag/Tag/MetaNameBase.php b/src/Plugin/metatag/Tag/MetaNameBase.php
index da00613..3652e1c 100644
--- a/src/Plugin/metatag/Tag/MetaNameBase.php
+++ b/src/Plugin/metatag/Tag/MetaNameBase.php
@@ -346,10 +346,14 @@ abstract class MetaNameBase extends PluginBase {
       $value = PlainTextOutput::renderFromHtml($this->value);
     }

-    $values = $this->multiple() ? explode(',', $value) : [$value];
+    $values = $this->multiple() ? explode('||', $value) : [$value];
     $elements = [];
     foreach ($values as $value) {
       $value = $this->tidy($value);
+      // Validate if the value is empty here, otherwise we get absolute URL.
+      if (empty($value)) {
+        continue;
+      }
       if ($this->requiresAbsoluteUrl()) {
         // Relative URL.
         if (parse_url($value, PHP_URL_HOST) == NULL) {
