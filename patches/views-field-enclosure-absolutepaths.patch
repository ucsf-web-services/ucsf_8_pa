--- a/core/modules/views/src/Plugin/views/row/RssFields.php
+++ b/core/modules/views/src/Plugin/views/row/RssFields.php
@@ -2,8 +2,19 @@
 
 namespace Drupal\views\Plugin\views\row;
 
+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Field\EntityReferenceFieldItemList;
 use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Image\ImageFactory;
 use Drupal\Core\Url;
+use Drupal\field\Entity\FieldConfig;
+use Drupal\field\Entity\FieldStorageConfig;
+use Drupal\file\Entity\File;
+use Drupal\file\Plugin\Field\FieldType\FileFieldItemList;
+use Drupal\image\Entity\ImageStyle;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+use Drupal\Component\Utility\UrlHelper;
 
 /**
  * Renders an RSS item based on fields.
@@ -19,11 +30,63 @@
 class RssFields extends RowPluginBase {
 
   /**
+   * The image style manager.
+   *
+   * @var \Drupal\Core\Image\ImageFactory
+   */
+  protected $imageFactory;
+
+  /**
    * Does the row plugin support to add fields to its output.
    *
    * @var bool
    */
   protected $usesFields = TRUE;
+
+  /**
+   * The entity type manager.
+   *
+   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   */
+  protected $entityTypeManager;
+
+  /**
+   * Constructs a RssPluginBase  object.
+   *
+   * @param array $configuration
+   *   A configuration array containing information about the plugin instance.
+   * @param string $plugin_id
+   *   The plugin_id for the plugin instance.
+   * @param mixed $plugin_definition
+   *   The plugin implementation definition.
+   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   *   The entity type manager.
+   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   *   The entity display repository.
+   * @param \Drupal\Core\Image\ImageFactory image_factory
+   *   The image factory.
+   */
+  public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityDisplayRepositoryInterface $entity_display_repository = NULL, ImageFactory $image_factory) {
+    parent::__construct($configuration, $plugin_id, $plugin_definition, $entity_type_manager, $entity_display_repository);
+
+    $this->imageFactory = $image_factory;
+    $this->entityTypeManager = $entity_type_manager;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
+    return new static(
+      $configuration,
+      $plugin_id,
+      $plugin_definition,
+      $container->get('entity_type.manager'),
+      $container->get('entity_display.repository'),
+      $container->get('image.factory')
+    );
+  }
+
 
   protected function defineOptions() {
     $options = parent::defineOptions();
@@ -32,6 +95,7 @@
     $options['description_field'] = ['default' => ''];
     $options['creator_field'] = ['default' => ''];
     $options['date_field'] = ['default' => ''];
+    $options['enclosure_field'] = ['default' => ''];
     $options['guid_field_options']['contains']['guid_field'] = ['default' => ''];
     $options['guid_field_options']['contains']['guid_field_is_permalink'] = ['default' => TRUE];
     return $options;
@@ -83,6 +147,13 @@
       '#options' => $view_fields_labels,
       '#default_value' => $this->options['date_field'],
       '#required' => TRUE,
+    ];
+    $form['enclosure_field'] = [
+      '#type' => 'select',
+      '#title' => $this->t('Enclosure field'),
+      '#description' => $this->t('Describes a media object that is attached to the item. This must be a file or media field.'),
+      '#options' => $view_fields_labels,
+      '#default_value' => $this->options['enclosure_field'],
     ];
     $form['guid_field_options'] = [
       '#type' => 'details',
@@ -131,7 +202,14 @@
     $item = new \stdClass();
     $item->title = $this->getField($row_index, $this->options['title_field']);
     $item->link = $this->getAbsoluteUrl($this->getField($row_index, $this->options['link_field']));
-
+    // If internal link, get absolute URL from URI.
+    $link = $this->getField($row_index, $this->options['link_field']);
+    if (!UrlHelper::isExternal($link)) {
+      $item->link = $this->getAbsoluteUrl($link);
+    }
+    else {
+      $item->link = Url::fromUri($this->getField($row_index, $this->options['link_field']))->setAbsolute()->toString();
+    }
     $field = $this->getField($row_index, $this->options['description_field']);
     $item->description = is_array($field) ? $field : ['#markup' => $field];
 
@@ -143,11 +221,83 @@
         'namespace' => ['xmlns:dc' => 'http://purl.org/dc/elements/1.1/'],
       ],
     ];
+
+    if ($this->options['enclosure_field']) {
+      $field_name = $this->options['enclosure_field'];
+      $field = $this->view->field[$field_name];
+      $field_options = $field->options;
+      $entity = $field->getEntity($this->view->result[$row_index]);
+      $enclosure = $entity->$field_name;
+      $file = NULL;
+
+      if ($enclosure instanceof FileFieldItemList) {
+        $value = $enclosure->getValue();
+        $file = $this->entityTypeManager->getStorage('file')->load($value[0]['target_id']);
+      }
+      elseif ($enclosure instanceof EntityReferenceFieldItemList && count($enclosure->referencedEntities()) > 0) {
+        $field = $this->entityTypeManager->getStorage('field_config')->load($entity->getEntityTypeId() . '.' . $entity->bundle() . '.' . $field_name);
+        if (isset($field)) {
+          $field_storage = $this->entityTypeManager->getStorage('field_storage_config')->load($field->getTargetEntityTypeId() . '.' . $field->getName());
+          if ($field->getType() == 'entity_reference' && $field_storage->getSetting("target_type") === "media") {
+            $file = $enclosure->referencedEntities()[0]->get('thumbnail')->entity;
+          }
+        }
+      }
+
+      if (isset($file)) {
+        $file_url = '';
+        $file_size = '';
+        $file_mimetype = '';
+        $file_uri = $file->getFileUri();
+        if (!empty($field_options['settings']['image_style'])) {
+          $style = $this->entityTypeManager->getStorage('image_style')->load($field_options['settings']['image_style']);
+          $derivative_uri = $style->buildUri($file_uri);
+          $derivative_exists = TRUE;
+          if (!file_exists($derivative_uri)) {
+            $derivative_exists = $style->createDerivative($file_uri,
+              $derivative_uri);
+          }
+          if ($derivative_exists) {
+            $image = $this->imageFactory->get($derivative_uri);
+            $file_url = file_create_url($derivative_uri);
+            $file_size = $image->getFileSize();
+            $file_mimetype = $image->getMimeType();
+          }
+        }
+        else {
+          // In RSS feeds, it is necessary to use absolute URLs. The 'url.site'
+          // cache context is already associated with RSS feed responses, so it
+          // does not need to be specified here.
+          $file_url = file_create_url($file_uri);
+          $file_size = $file->getSize();
+          $file_mimetype = $file->getMimeType();
+        }
+        if (!empty($file_url)) {
+          $item->elements[] = [
+            'key' => 'enclosure',
+            'attributes' => [
+              'url' => $file_url,
+              'length' => $file_size,
+              'type' => $file_mimetype,
+            ],
+          ];
+        }
+      }
+    }
+
     $guid_is_permalink_string = 'false';
     $item_guid = $this->getField($row_index, $this->options['guid_field_options']['guid_field']);
     if ($this->options['guid_field_options']['guid_field_is_permalink']) {
       $guid_is_permalink_string = 'true';
       $item_guid = $this->getAbsoluteUrl($item_guid);
+      
+      // If the guid is an internal link, get the absolute URL from the URI.
+      if (!UrlHelper::isExternal($item_guid)) {
+        $item_guid = $this->getAbsoluteUrl($item_guid);
+      }
+      else {
+        $item_guid = Url::fromUri($item_guid);
+      }
     }
     $item->elements[] = [
       'key' => 'guid',

